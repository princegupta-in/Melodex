// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  email        String            @unique
  provider     Providers
  streams      Stream[]
  upvotes      Upvote[]
  participants RoomParticipant[]
  createdRooms Room[]
}

model Stream {
  id          String     @id @default(uuid())
  type        StreamType
  active      Boolean    @default(true)
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  upvotes     Upvote[]
  url         String
  extractedId String
  title       String     @default("")
  thumbnail   String     @default("")
  roomId      String
  room        Room       @relation(fields: [roomId], references: [id])
  duration    Int? //video length in seconds
  createdAt   DateTime   @default(now())
}

model Upvote {
  id            String           @id @default(uuid())
  value         Int
  userId        String? // optional for guests
  participantId String? // for guest votes
  streamId      String
  user          User?            @relation(fields: [userId], references: [id])
  stream        Stream           @relation(fields: [streamId], references: [id])
  participant   RoomParticipant? @relation(fields: [participantId], references: [id])

  @@unique([userId, streamId], name: "userId_streamId")
  @@unique([participantId, streamId], name: "participantId_streamId")
}

enum Providers {
  Google
}

enum StreamType {
  Spotify
  Youtube
}

enum ParticipantRole {
  CREATOR
  SUBCREATOR
}

model Room {
  id           String            @id @default(uuid())
  name         String
  creatorId    String
  creator      User              @relation(fields: [creatorId], references: [id])
  streams      Stream[]
  participants RoomParticipant[]
  createdAt    DateTime          @default(now())
}

model RoomParticipant {
  id     String          @id @default(uuid())
  name   String
  roomId String
  room   Room            @relation(fields: [roomId], references: [id])
  role   ParticipantRole @default(SUBCREATOR)
  userId String?
  user   User?           @relation(fields: [userId], references: [id])
  Upvote Upvote[]
}
